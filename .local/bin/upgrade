#!/usr/bin/env bash

set -e

__USAGE="Upgrade programs and libraries managed by apt, pipx, rustup and other.

USAGE:
	$(basename $0) [-h|--help] [-p|--prompt] [-s|--skip SKIP] [RUN]...

SKIP: Skip selected tool(s), overrides RUN.
	apt          Skip apt upgrade
	pipx         Skip pipx upgrade
	rust         Skip rustup update
	binenv       Skip binenv upgrade
	sdk          Skip sdk upgrade
	omz          Skip omz update 
	vim          Skip (neo)vim updates (vim-plug, coc) 
	extras       Skip all but apt upgrade

RUN: Run only selected tool(s), can be overridden by SKIP.
	apt          Run only apt upgrade
	pipx         Run only pipx upgrade
	rust         Run only rustup update
	binenv       Run only binenv upgrade
	sdk          Run only sdk upgrade
	omz          Run only omz update
	vim          Run only (neo)vim updates (vim-plug, coc)
"

usage() {
	echo "$__USAGE"
}

PROMPT=1

RUN_APT=0
RUN_PIPX=0
RUN_RUST=0
RUN_BINENV=0
RUN_SDK=0
RUN_OMZ=0
RUN_VIM=0

POSITIONAL_ARGS=()

while [[ $# -gt 0 ]]; do
  case $1 in
		-h|--help)
			usage
			exit 0
			;;
		-p|--prompt)
			PROMPT=0
			shift
			;;
    -s|--skip)
			case "$2" in
				apt)
					RUN_APT=$((RUN_APT - 2))
					;;
				pipx)
					RUN_PIPX=$((RUN_PIPX - 2))
					;;
				rust)
					RUN_RUST=$((RUN_RUST - 2))
					;;
				binenv)
					RUN_BINENV=$((RUN_BINENV - 2))
					;;
				sdk)
					RUN_SDK=$((RUN_SDK - 2))
					;;
				omz)
					RUN_OMZ=$((RUN_OMZ - 2))
					;;
				vim)
					RUN_VIM=$((RUN_VIM - 2))
					;;
				extras)
					RUN_PIPX=$((RUN_PIPX - 2))
					RUN_RUST=$((RUN_RUST - 2))
					RUN_BINENV=$((RUN_BINENV - 2))
					RUN_SDK=$((RUN_SDK - 2))
					RUN_OMZ=$((RUN_OMZ - 2))
					RUN_VIM=$((RUN_VIM - 2))
					;;
				*)
					echo "Unknown skip option value $2"
					usage
					exit 1
					;;
			esac
			# move past argument and value
      shift
      shift
      ;;
    -*|--*)
      echo "Unknown option $1"
			usage
      exit 1
      ;;
    *)
			# save positional arg
			POSITIONAL_ARGS+=("$1")
      shift
      ;;
  esac
done

# restore positional parameters
set -- "${POSITIONAL_ARGS[@]}"

if [[ $# -eq 0 ]]; then
	RUN_APT=$((RUN_APT + 1))
	RUN_PIPX=$((RUN_PIPX + 1))
	RUN_RUST=$((RUN_RUST + 1))
	RUN_BINENV=$((RUN_BINENV + 1))
	RUN_SDK=$((RUN_SDK + 1))
	RUN_OMZ=$((RUN_OMZ + 1))
	RUN_VIM=$((RUN_VIM + 1))
else
	while [[ $# -gt 0 ]]; do
		case $1 in
			apt)
				RUN_APT=$((RUN_APT + 1))
				shift
				;;
			pipx)
				RUN_PIPX=$((RUN_PIPX + 1))
				shift
				;;
			rust)
				RUN_RUST=$((RUN_RUST + 1))
				shift
				;;
			binenv)
				RUN_BINENV=$((RUN_BINENV + 1))
				shift
				;;
			sdk)
				RUN_SDK=$((RUN_SDK + 1))
				shift
				;;
			omz)
				RUN_OMZ=$((RUN_OMZ + 1))
				shift
				;;
			vim)
				RUN_VIM=$((RUN_VIM + 1))
				shift
				;;
			*)
				shift
				;;
		esac
	done
fi

if [[ $PROMPT -eq 0 ]]; then 
	read -p "Running system & tooling update - continue (yY/nN)? " choice
	case "$choice" in 
		y|Y) 
			;;
		n|N) 
			exit 0
			;;
		*) 
			exit 0
			;;
	esac
fi

if [[ $RUN_APT -gt 0 ]]; then
	echo "Ugrading system programs..."
	sudo apt update
	sudo apt upgrade -y
	sudo apt autoremove -y
	sudo apt autoclean
fi

if [[ "$(command -v pipx)" ]] && [[ $RUN_PIPX -gt 0 ]]; then
	echo "Upgrading pipx tools..."
	pipx upgrade-all
fi

if [[ "$(command -v rustup)" ]] && [[ $RUN_RUST -gt 0 ]]; then
	echo "Upgrading Rust toolchains..."
	rustup upgrade

	CONF_MK="${HOME}/dev/configs/Makefile"
	if [[ -f "${CONF_MK}" ]]; then
		# TODO: autoremove old/unused versions
		echo "Upgrading Rust applications & Cargo extensions..."
		make -f "${CONF_MK}" rust-tools cargo-tools
	fi
fi

binenv_upgrade() {
	local dist="$(echo $1 | cut -d: -f1)"

	# FIXME: https://github.com/matyama/configs/issues/15
	if [[ "${dist}" == "krew" ]]; then
		return 0
	fi

	# TODO: improvement - don't unnecessarily check for current (default) version
	local version=$(\
		echo $1 | \
		# select release version list
		cut -d : -f 2 | \
		# select only later releases than the currently installed one
		sed 's|(default).*||g' | \
		tr " " "\n" | \
		# filter out any RC/alpha/beta releases and non-version outputs
		egrep -v "rc|alpha|beta|^[[:space:]]*$" | \
		# select the latest release version
		head -1 | \
		# make sure to select only semantic version and strip color outputs
		egrep -o "[[:digit:]]+(\.[[:digit:]]+)+" \
	)

	binenv install "${dist}" "${version}"
}

if [[ "$(command -v binenv)" ]] && [[ $RUN_BINENV -gt 0 ]]; then
	echo "Upgrading binenv distributions..."
	binenv update
	# upgrade binenv before any other distribution and refresh distribution list
	binenv_upgrade $(binenv versions | grep binenv)
	binenv update
	while read -r binenv_dist; do
		binenv_upgrade "${binenv_dist}"
	done <<< "$(binenv versions | grep default | grep -v binenv)"
fi

# Include `sdkman-init.sh` to make `sdk` command available
[[ $RUN_SDK -gt 0 ]] && \
	[[ -s "${SDKMAN_DIR}/bin/sdkman-init.sh" ]] && \
	source "${SDKMAN_DIR}/bin/sdkman-init.sh"

if [[ "$(command -v sdk)" ]] && [[ $RUN_SDK -gt 0 ]]; then
	echo "Updating sdk..."
	sdk update
	echo "Upgrading sdk candidates..."
	CANDIDATES=$(\
		# make this non-interactive and don't run any upgrade
		yes n | \
		head -1 | \
		# list upgradable candidates
		sdk ug | \
		# strip irrelevant ouput and keep only lines with candidates
		grep local | \
		# skipping automatic java upgrade because it breaks apps
		grep -v java | \
		# grep candidate name
		cut -d ' ' -f 1 | \
		# remove colors from the output
		sed -r 's|\x1b\[[0-9;]*m||g' \
	)
	for candidate in $CANDIDATES; do
		yes Y | head -1 | sdk upgrade "${candidate}"
	done
	if [[ -n $ZSH ]] && [[ $ZSH == *oh-my-zsh ]]; then
		zsh -ic '
			if (( $+functions[sdk-refresh-completion-files] )); then
				echo "Updating zsh-sdkman files..."
				sdk-refresh-completion-files
			fi
		'
	fi
fi

if [[ -n $ZSH ]] && [[ $ZSH == *oh-my-zsh ]] && [[ $RUN_OMZ -gt 0 ]]; then
	# There should be no downside to running the upgrade script directly
	#  - See: https://bit.ly/3Nlq6KP
	"$ZSH/tools/upgrade.sh"
fi

if [[ -n "$EDITOR" ]] && [[ "$EDITOR" == *vim ]] && [[ $RUN_VIM -gt 0 ]]; then
	echo "Upgrading ${EDITOR} plugins..."
	# FIXME: CocUpdate does not seem to run with +qall
	"$EDITOR" --headless +PlugUpdate +CocUpdate +qall &> /dev/null
fi

